const { sequelize } = require('../config/database');
const { DatBan, Ban } = require('../models');
const { QueryTypes } = require('sequelize');

/**
 * Script test h·ªá th·ªëng t·ª± ƒë·ªông h·ªßy ƒë∆°n ƒë·∫∑t b√†n
 */

async function createTestExpiredReservations() {
  try {
    console.log('üß™ T·∫°o d·ªØ li·ªáu test cho ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n...');

    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    const testReservations = [
      // ƒê∆°n ƒë·∫∑t b√†n h√¥m qua (qu√° h·∫°n)
      {
        MaBan: 1,
        NgayDat: yesterday.toISOString().split('T')[0],
        GioDat: '19:00:00',
        GioKetThuc: '21:00:00',
        SoNguoi: 4,
        TrangThai: 'ƒê√£ ƒë·∫∑t',
        TenKhach: 'Test Customer 1',
        SoDienThoai: '0123456789',
        GhiChu: 'Test reservation - should be auto cancelled'
      },
      // ƒê∆°n ƒë·∫∑t b√†n h√¥m nay nh∆∞ng ƒë√£ qu√° gi·ªù + 30 ph√∫t
      {
        MaBan: 2,
        NgayDat: today.toISOString().split('T')[0],
        GioDat: '10:00:00',
        GioKetThuc: '12:00:00',
        SoNguoi: 2,
        TrangThai: 'ƒê√£ x√°c nh·∫≠n',
        TenKhach: 'Test Customer 2',
        SoDienThoai: '0987654321',
        GhiChu: 'Test reservation - should be auto cancelled'
      },
      // ƒê∆°n ƒë·∫∑t b√†n h√¥m nay, s·∫Øp ƒë·∫øn gi·ªù (kh√¥ng h·ªßy)
      {
        MaBan: 3,
        NgayDat: today.toISOString().split('T')[0],
        GioDat: '20:00:00',
        GioKetThuc: '22:00:00',
        SoNguoi: 6,
        TrangThai: 'ƒê√£ ƒë·∫∑t',
        TenKhach: 'Test Customer 3',
        SoDienThoai: '0111222333',
        GhiChu: 'Test reservation - should NOT be cancelled'
      }
    ];

    for (const reservation of testReservations) {
      await DatBan.create(reservation);
      console.log(`‚úÖ T·∫°o ƒë∆°n test: ${reservation.TenKhach} - ${reservation.NgayDat} ${reservation.GioDat}`);
    }

    console.log('üéâ T·∫°o d·ªØ li·ªáu test th√†nh c√¥ng!');
    return testReservations.length;

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu test:', error);
    throw error;
  }
}

async function testAutoCancelProcedure() {
  try {
    console.log('\nüîÑ Test stored procedure TuDongHuyDonDatBanQuaHan...');

    // G·ªçi stored procedure
    const results = await sequelize.query(
      'CALL TuDongHuyDonDatBanQuaHan()',
      { type: QueryTypes.SELECT }
    );

    const result = results[0];
    console.log(`üìä K·∫øt qu·∫£: ƒê√£ h·ªßy ${result.SoDonDaHuy} ƒë∆°n ƒë·∫∑t b√†n`);
    console.log(`‚è∞ Th·ªùi gian th·ª±c hi·ªán: ${result.ThoiGianThucHien}`);
    console.log(`üí¨ Th√¥ng b√°o: ${result.ThongBao}`);

    return result;

  } catch (error) {
    console.error('‚ùå L·ªói khi test auto cancel procedure:', error);
    throw error;
  }
}

async function testExpiringReservationsCheck() {
  try {
    console.log('\nüîç Test ki·ªÉm tra ƒë∆°n s·∫Øp h·∫øt h·∫°n...');

    // Ki·ªÉm tra ƒë∆°n s·∫Øp h·∫øt h·∫°n trong 60 ph√∫t
    const results = await sequelize.query(
      'CALL KiemTraDonSapHetHan(60)',
      { type: QueryTypes.SELECT }
    );

    console.log(`üìã T√¨m th·∫•y ${results.length} ƒë∆°n s·∫Øp h·∫øt h·∫°n:`);
    results.forEach(reservation => {
      console.log(`  - ${reservation.TenKhach}: ${reservation.TenBan} - ${reservation.GioDat} (${reservation.ThoiGianConLaiText})`);
    });

    return results;

  } catch (error) {
    console.error('‚ùå L·ªói khi test expiring check:', error);
    throw error;
  }
}

async function testTimeRemainingFunction() {
  try {
    console.log('\n‚è±Ô∏è Test function t√≠nh th·ªùi gian c√≤n l·∫°i...');

    const testCases = [
      { date: '2024-01-15', time: '19:00:00', description: 'Th·ªùi gian trong t∆∞∆°ng lai' },
      { date: '2023-01-15', time: '19:00:00', description: 'Th·ªùi gian trong qu√° kh·ª©' },
      { date: new Date().toISOString().split('T')[0], time: new Date().toTimeString().split(' ')[0], description: 'Th·ªùi gian hi·ªán t·∫°i' }
    ];

    for (const testCase of testCases) {
      const [result] = await sequelize.query(
        'SELECT TinhThoiGianConLai(?, ?) as ThoiGianConLai',
        {
          replacements: [testCase.date, testCase.time],
          type: QueryTypes.SELECT
        }
      );

      console.log(`  ${testCase.description}: ${testCase.date} ${testCase.time} ‚Üí ${result.ThoiGianConLai}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi test time remaining function:', error);
    throw error;
  }
}

async function testCancelledReservationsReport() {
  try {
    console.log('\nüìä Test b√°o c√°o ƒë∆°n b·ªã h·ªßy...');

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7); // 7 ng√†y tr∆∞·ªõc
    const endDate = new Date();

    const results = await sequelize.query(
      'CALL BaoCaoDonDatBanBiHuy(?, ?)',
      {
        replacements: [
          startDate.toISOString().split('T')[0],
          endDate.toISOString().split('T')[0]
        ],
        type: QueryTypes.SELECT
      }
    );

    console.log(`üìà B√°o c√°o ƒë∆°n b·ªã h·ªßy (7 ng√†y qua):`);
    if (results.length === 0) {
      console.log('  Kh√¥ng c√≥ ƒë∆°n n√†o b·ªã h·ªßy trong kho·∫£ng th·ªùi gian n√†y');
    } else {
      results.forEach(day => {
        console.log(`  ${day.NgayTao}: ${day.TongSoDonHuy} ƒë∆°n (${day.SoDonHuyTuDong} t·ª± ƒë·ªông, ${day.SoDonHuyThucCong} th·ªß c√¥ng)`);
      });
    }

    return results;

  } catch (error) {
    console.error('‚ùå L·ªói khi test cancelled report:', error);
    throw error;
  }
}

async function checkEventSchedulerStatus() {
  try {
    console.log('\nüîß Ki·ªÉm tra tr·∫°ng th√°i Event Scheduler...');

    // Ki·ªÉm tra Event Scheduler
    const [schedulerStatus] = await sequelize.query(
      "SHOW VARIABLES LIKE 'event_scheduler'",
      { type: QueryTypes.SELECT }
    );

    console.log(`üìã Event Scheduler: ${schedulerStatus?.Value || 'Unknown'}`);

    // Ki·ªÉm tra event AutoCancelExpiredReservations
    const events = await sequelize.query(
      "SELECT EVENT_NAME, STATUS, INTERVAL_VALUE, INTERVAL_FIELD FROM information_schema.EVENTS WHERE EVENT_NAME = 'AutoCancelExpiredReservations'",
      { type: QueryTypes.SELECT }
    );

    if (events.length > 0) {
      const event = events[0];
      console.log(`üéØ Auto Cancel Event: ${event.STATUS} (ch·∫°y m·ªói ${event.INTERVAL_VALUE} ${event.INTERVAL_FIELD})`);
    } else {
      console.log('‚ö†Ô∏è Auto Cancel Event ch∆∞a ƒë∆∞·ª£c t·∫°o');
    }

    return { schedulerStatus, events };

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra Event Scheduler:', error);
    throw error;
  }
}

async function cleanupTestData() {
  try {
    console.log('\nüßπ D·ªçn d·∫πp d·ªØ li·ªáu test...');

    // X√≥a c√°c ƒë∆°n ƒë·∫∑t b√†n test
    const deletedCount = await DatBan.destroy({
      where: {
        TenKhach: ['Test Customer 1', 'Test Customer 2', 'Test Customer 3']
      }
    });

    console.log(`‚úÖ ƒê√£ x√≥a ${deletedCount} ƒë∆°n ƒë·∫∑t b√†n test`);

    // X√≥a log test
    await sequelize.query(
      "DELETE FROM LogHeThong WHERE MoTa LIKE '%test%'",
      { type: QueryTypes.DELETE }
    );

    console.log('‚úÖ ƒê√£ x√≥a log test');

  } catch (error) {
    console.error('‚ùå L·ªói khi d·ªçn d·∫πp:', error);
  }
}

async function createTestTablesInUse() {
  try {
    console.log('üß™ T·∫°o d·ªØ li·ªáu test cho b√†n ƒëang s·ª≠ d·ª•ng...');

    const { Ban } = require('../models');

    // T·∫°o m·ªôt s·ªë b√†n ·ªü tr·∫°ng th√°i "ƒêang s·ª≠ d·ª•ng"
    await Ban.update(
      { TrangThai: 'ƒêang s·ª≠ d·ª•ng' },
      { where: { MaBan: [1, 2, 3] } }
    );

    console.log('‚úÖ ƒê√£ t·∫°o 3 b√†n ·ªü tr·∫°ng th√°i "ƒêang s·ª≠ d·ª•ng"');
    return 3;

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o b√†n test:', error);
    throw error;
  }
}

async function testResetTablesProcedure() {
  try {
    console.log('\nüåô Test stored procedure TuDongResetBanThongMinh...');

    // G·ªçi stored procedure
    const results = await sequelize.query(
      'CALL TuDongResetBanThongMinh()',
      { type: QueryTypes.SELECT }
    );

    const result = results[0];
    console.log(`üìä K·∫øt qu·∫£: ƒê√£ reset ${result.SoBanDaReset} b√†n`);
    console.log(`‚è∞ Th·ªùi gian th·ª±c hi·ªán: ${result.ThoiGianThucHien}`);
    console.log(`üí¨ Th√¥ng b√°o: ${result.ThongBao}`);

    return result;

  } catch (error) {
    console.error('‚ùå L·ªói khi test reset tables procedure:', error);
    throw error;
  }
}

async function testTableCanResetFunction() {
  try {
    console.log('\nüîç Test function ki·ªÉm tra b√†n c√≥ th·ªÉ reset...');

    const testTableIds = [1, 2, 3];

    for (const tableId of testTableIds) {
      const [result] = await sequelize.query(
        'SELECT KiemTraBanCoTheReset(?) as CoTheReset',
        {
          replacements: [tableId],
          type: QueryTypes.SELECT
        }
      );

      console.log(`  B√†n ${tableId}: ${result.CoTheReset === 1 ? 'C√≥ th·ªÉ reset' : 'Kh√¥ng th·ªÉ reset'}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi test table can reset function:', error);
    throw error;
  }
}

async function testResetTablesReport() {
  try {
    console.log('\nüìä Test b√°o c√°o reset b√†n...');

    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 7); // 7 ng√†y tr∆∞·ªõc
    const endDate = new Date();

    const results = await sequelize.query(
      'CALL BaoCaoResetBanTheoNgay(?, ?)',
      {
        replacements: [
          startDate.toISOString().split('T')[0],
          endDate.toISOString().split('T')[0]
        ],
        type: QueryTypes.SELECT
      }
    );

    console.log(`üìà B√°o c√°o reset b√†n (7 ng√†y qua):`);
    if (results.length === 0) {
      console.log('  Kh√¥ng c√≥ d·ªØ li·ªáu reset b√†n trong kho·∫£ng th·ªùi gian n√†y');
    } else {
      results.forEach(day => {
        console.log(`  ${day.NgayReset}: T·ªïng ${day.TongSoBanReset} b√†n (${day.SoBanResetThongMinh} th√¥ng minh, ${day.SoBanResetToanBo} to√†n b·ªô)`);
      });
    }

    return results;

  } catch (error) {
    console.error('‚ùå L·ªói khi test reset tables report:', error);
    throw error;
  }
}

async function runFullTest() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu test h·ªá th·ªëng t·ª± ƒë·ªông h·ªßy ƒë∆°n ƒë·∫∑t b√†n v√† reset b√†n...\n');

  try {
    // 1. T·∫°o d·ªØ li·ªáu test cho ƒë·∫∑t b√†n
    await createTestExpiredReservations();

    // 2. T·∫°o d·ªØ li·ªáu test cho reset b√†n
    await createTestTablesInUse();

    // 3. Test auto cancel procedure
    await testAutoCancelProcedure();

    // 4. Test reset tables procedure
    await testResetTablesProcedure();

    // 5. Test expiring reservations check
    await testExpiringReservationsCheck();

    // 6. Test table can reset function
    await testTableCanResetFunction();

    // 7. Test time remaining function
    await testTimeRemainingFunction();

    // 8. Test cancelled reservations report
    await testCancelledReservationsReport();

    // 9. Test reset tables report
    await testResetTablesReport();

    // 10. Check Event Scheduler status
    await checkEventSchedulerStatus();

    console.log('\nüéâ T·∫•t c·∫£ test ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');

  } catch (error) {
    console.error('\n‚ùå Test th·∫•t b·∫°i:', error);
  } finally {
    // Cleanup
    await cleanupTestData();
    console.log('\n‚úÖ Test ho√†n t·∫•t v√† ƒë√£ d·ªçn d·∫πp d·ªØ li·ªáu');
  }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  runFullTest()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('Fatal error:', error);
      process.exit(1);
    });
}

module.exports = {
  createTestExpiredReservations,
  testAutoCancelProcedure,
  testExpiringReservationsCheck,
  testTimeRemainingFunction,
  testCancelledReservationsReport,
  checkEventSchedulerStatus,
  createTestTablesInUse,
  testResetTablesProcedure,
  testTableCanResetFunction,
  testResetTablesReport,
  cleanupTestData,
  runFullTest
};
