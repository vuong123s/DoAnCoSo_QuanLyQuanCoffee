const { KhuVuc, Ban } = require('../models');
const { sequelize } = require('../config/database');

// Sample area data with Vietnamese descriptions and media
const sampleAreas = [
  {
    TenKhuVuc: 'T·∫ßng 1',
    MoTa: 'Khu v·ª±c ch√≠nh v·ªõi kh√¥ng gian r·ªông r√£i, g·∫ßn qu·∫ßy bar v√† b·∫øp. Ph√π h·ª£p cho kh√°ch h√†ng mu·ªën theo d√µi ho·∫°t ƒë·ªông c·ªßa qu√°n.',
    HinhAnh: 'https://images.unsplash.com/photo-1554118811-1e0d58224f24?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80',
    Video: 'https://www.youtube.com/watch?v=sample-tang1',
    TrangThai: 'Ho·∫°t ƒë·ªông'
  },
  {
    TenKhuVuc: 'T·∫ßng 2',
    MoTa: 'T·∫ßng tr√™n y√™n tƒ©nh v·ªõi c√°c ph√≤ng ri√™ng v√† ban c√¥ng. L√Ω t∆∞·ªüng cho c√°c cu·ªôc h·ªçp kinh doanh v√† h·∫πn h√≤.',
    HinhAnh: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80',
    Video: 'https://www.youtube.com/watch?v=sample-tang2',
    TrangThai: 'Ho·∫°t ƒë·ªông'
  },
  {
    TenKhuVuc: 'VIP',
    MoTa: 'Khu v·ª±c cao c·∫•p v·ªõi ph√≤ng ri√™ng sang tr·ªçng v√† d·ªãch v·ª• ƒë·∫∑c bi·ªát. D√†nh cho kh√°ch h√†ng VIP v√† s·ª± ki·ªán quan tr·ªçng.',
    HinhAnh: 'https://images.unsplash.com/photo-1551218808-94e220e084d2?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80',
    Video: 'https://www.youtube.com/watch?v=sample-vip',
    TrangThai: 'Ho·∫°t ƒë·ªông'
  },
  {
    TenKhuVuc: 'S√¢n th∆∞·ª£ng',
    MoTa: 'Kh√¥ng gian m·ªü v·ªõi t·∫ßm nh√¨n ƒë·∫πp v√† kh√¥ng kh√≠ trong l√†nh. Ho√†n h·∫£o cho nh·ªØng bu·ªïi t·ªëi l√£ng m·∫°n v√† ti·ªác ngo√†i tr·ªùi.',
    HinhAnh: 'https://images.unsplash.com/photo-1519947486511-46149fa0a254?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80',
    Video: 'https://www.youtube.com/watch?v=sample-rooftop',
    TrangThai: 'Ho·∫°t ƒë·ªông'
  },
  {
    TenKhuVuc: 'Ngo√†i tr·ªùi',
    MoTa: 'S√¢n v∆∞·ªùn xanh m√°t v·ªõi kh√¥ng gian t·ª± nhi√™n th∆∞ gi√£n. Th√≠ch h·ª£p cho gia ƒë√¨nh v√† nh√≥m b·∫°n th√≠ch kh√¥ng gian m·ªü.',
    HinhAnh: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80',
    Video: 'https://www.youtube.com/watch?v=sample-outdoor',
    TrangThai: 'Ho·∫°t ƒë·ªông'
  }
];

// Function to generate tables for each area
const generateTablesForArea = (areaId, areaName) => {
  const tables = [];
  let tableCount = 0;
  let capacities = [];
  let prefix = '';
  
  // Define table characteristics based on area
  switch (areaName) {
    case 'T·∫ßng 1':
      tableCount = 12;
      capacities = [2, 2, 4, 4, 4, 4, 6, 6, 6, 8, 8, 10];
      prefix = 'T1';
      break;
    case 'T·∫ßng 2':
      tableCount = 8;
      capacities = [2, 4, 4, 4, 6, 6, 8, 8];
      prefix = 'T2';
      break;
    case 'VIP':
      tableCount = 4;
      capacities = [4, 6, 8, 12];
      prefix = 'VIP';
      break;
    case 'S√¢n th∆∞·ª£ng':
      tableCount = 6;
      capacities = [2, 4, 4, 6, 6, 8];
      prefix = 'ST';
      break;
    case 'Ngo√†i tr·ªùi':
      tableCount = 8;
      capacities = [4, 4, 4, 6, 6, 6, 8, 10];
      prefix = 'NT';
      break;
  }
  
  // Generate positions based on area type
  const positions = [
    'G√≥c tr√°i', 'G√≥c ph·∫£i', 'Gi·ªØa ph√≤ng', 'G·∫ßn c·ª≠a s·ªï', 'G·∫ßn c·ª≠a ra v√†o',
    'Khu v·ª±c y√™n tƒ©nh', 'G·∫ßn qu·∫ßy bar', 'Ban c√¥ng', 'D∆∞·ªõi b√≥ng c√¢y', 'T·∫ßm nh√¨n ƒë·∫πp'
  ];
  
  for (let i = 0; i < tableCount; i++) {
    const tableNumber = String(i + 1).padStart(2, '0');
    const capacity = capacities[i] || 4;
    const position = positions[i % positions.length];
    
    tables.push({
      TenBan: `${prefix}-${tableNumber}`,
      SoCho: capacity,
      MaKhuVuc: areaId,
      ViTri: position,
      TrangThai: 'Tr·ªëng'
    });
  }
  
  return tables;
};

// Main seeding function
const seedAreasAndTables = async () => {
  try {
    console.log('üå± Starting to seed areas and tables...');
    
    // Start transaction
    const transaction = await sequelize.transaction();
    
    try {
      // Clear existing data
      console.log('üßπ Clearing existing data...');
      await Ban.destroy({ where: {}, transaction });
      await KhuVuc.destroy({ where: {}, transaction });
      
      // Create areas
      console.log('üìç Creating areas...');
      const createdAreas = await KhuVuc.bulkCreate(sampleAreas, { 
        transaction,
        returning: true 
      });
      
      console.log(`‚úÖ Created ${createdAreas.length} areas`);
      
      // Create tables for each area
      console.log('ü™ë Creating tables...');
      let allTables = [];
      
      for (const area of createdAreas) {
        const tables = generateTablesForArea(area.MaKhuVuc, area.TenKhuVuc);
        allTables = allTables.concat(tables);
        console.log(`  üìã Generated ${tables.length} tables for ${area.TenKhuVuc}`);
      }
      
      await Ban.bulkCreate(allTables, { transaction });
      console.log(`‚úÖ Created ${allTables.length} tables total`);
      
      // Commit transaction
      await transaction.commit();
      
      // Display summary
      console.log('\nüìä SEEDING SUMMARY');
      console.log('=' .repeat(50));
      
      for (const area of createdAreas) {
        const tableCount = allTables.filter(t => t.MaKhuVuc === area.MaKhuVuc).length;
        const capacityRange = allTables
          .filter(t => t.MaKhuVuc === area.MaKhuVuc)
          .map(t => t.SoCho);
        const minCapacity = Math.min(...capacityRange);
        const maxCapacity = Math.max(...capacityRange);
        const totalCapacity = capacityRange.reduce((sum, cap) => sum + cap, 0);
        
        console.log(`üè¢ ${area.TenKhuVuc}:`);
        console.log(`   Tables: ${tableCount}`);
        console.log(`   Capacity: ${minCapacity}-${maxCapacity} seats per table`);
        console.log(`   Total capacity: ${totalCapacity} seats`);
        console.log(`   Status: ${area.TrangThai}`);
        console.log('');
      }
      
      const totalTables = allTables.length;
      const totalCapacity = allTables.reduce((sum, table) => sum + table.SoCho, 0);
      
      console.log(`üéØ OVERALL STATISTICS:`);
      console.log(`   Total Areas: ${createdAreas.length}`);
      console.log(`   Total Tables: ${totalTables}`);
      console.log(`   Total Seating Capacity: ${totalCapacity} people`);
      console.log(`   Average Table Size: ${(totalCapacity / totalTables).toFixed(1)} seats`);
      
      console.log('\nüéâ Seeding completed successfully!');
      
      // Test data integrity
      console.log('\nüîç Verifying data integrity...');
      const areaCount = await KhuVuc.count();
      const tableCount = await Ban.count();
      
      console.log(`‚úÖ Areas in database: ${areaCount}`);
      console.log(`‚úÖ Tables in database: ${tableCount}`);
      
      if (areaCount === sampleAreas.length && tableCount === totalTables) {
        console.log('‚úÖ Data integrity verified!');
      } else {
        console.log('‚ö†Ô∏è Data integrity check failed!');
      }
      
    } catch (error) {
      await transaction.rollback();
      throw error;
    }
    
  } catch (error) {
    console.error('üí• Seeding failed:', error);
    throw error;
  }
};

// Function to display current data
const displayCurrentData = async () => {
  try {
    console.log('\nüìã CURRENT DATABASE STATE');
    console.log('=' .repeat(50));
    
    const areas = await KhuVuc.findAll({
      include: [{
        model: Ban,
        as: 'tables',
        attributes: ['MaBan', 'TenBan', 'SoCho', 'ViTri', 'TrangThai']
      }],
      order: [['MaKhuVuc', 'ASC']]
    });
    
    if (areas.length === 0) {
      console.log('üì≠ No areas found in database');
      return;
    }
    
    for (const area of areas) {
      console.log(`\nüè¢ ${area.TenKhuVuc} (ID: ${area.MaKhuVuc})`);
      console.log(`   üìù Description: ${area.MoTa}`);
      console.log(`   üñºÔ∏è Image: ${area.HinhAnh ? 'Yes' : 'No'}`);
      console.log(`   üé• Video: ${area.Video ? 'Yes' : 'No'}`);
      console.log(`   üìä Status: ${area.TrangThai}`);
      
      if (area.tables && area.tables.length > 0) {
        console.log(`   ü™ë Tables (${area.tables.length}):`);
        area.tables.forEach(table => {
          console.log(`      ${table.TenBan}: ${table.SoCho} seats, ${table.ViTri}, ${table.TrangThai}`);
        });
        
        const totalCapacity = area.tables.reduce((sum, table) => sum + table.SoCho, 0);
        console.log(`   üéØ Total capacity: ${totalCapacity} seats`);
      } else {
        console.log('   ü™ë No tables');
      }
    }
    
  } catch (error) {
    console.error('üí• Failed to display current data:', error);
  }
};

// Command line interface
const main = async () => {
  const command = process.argv[2];
  
  try {
    switch (command) {
      case 'seed':
        await seedAreasAndTables();
        break;
      case 'display':
        await displayCurrentData();
        break;
      case 'reset':
        await seedAreasAndTables();
        await displayCurrentData();
        break;
      default:
        console.log('üìñ Usage:');
        console.log('  node seedAreasAndTables.js seed    - Seed database with sample data');
        console.log('  node seedAreasAndTables.js display - Display current database state');
        console.log('  node seedAreasAndTables.js reset   - Reset and seed database');
        break;
    }
  } catch (error) {
    console.error('üí• Command failed:', error);
    process.exit(1);
  }
  
  process.exit(0);
};

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = {
  seedAreasAndTables,
  displayCurrentData,
  sampleAreas
};
