const cron = require('node-cron');
const { sequelize } = require('../config/database');
const { QueryTypes } = require('sequelize');

/**
 * Cron job ƒë·ªÉ t·ª± ƒë·ªông h·ªßy ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n
 * Ch·∫°y m·ªói 30 ph√∫t
 */

class AutoCancelJob {
  constructor() {
    this.isRunning = false;
    this.lastRun = null;
    this.totalCancelled = 0;
  }

  async executeCancelExpiredReservations() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Auto cancel job ƒëang ch·∫°y, b·ªè qua l·∫ßn n√†y');
      return;
    }

    this.isRunning = true;
    const startTime = new Date();

    try {
      console.log(`üîÑ [${startTime.toISOString()}] B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông h·ªßy ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n...`);

      // G·ªçi stored procedure (n·∫øu c√≥)
      let result;
      try {
        const results = await sequelize.query(
          'CALL TuDongHuyDonDatBanQuaHan()',
          { type: QueryTypes.SELECT }
        );
        result = results[0];
      } catch (procError) {
        console.log('‚ö†Ô∏è Stored procedure kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng logic JavaScript...');
        result = await this.executeJavaScriptLogic();
      }

      const endTime = new Date();
      const duration = endTime - startTime;

      this.lastRun = endTime;
      this.totalCancelled += result.SoDonDaHuy || 0;

      console.log(`‚úÖ [${endTime.toISOString()}] Ho√†n th√†nh t·ª± ƒë·ªông h·ªßy ƒë∆°n:`);
      console.log(`   - S·ªë ƒë∆°n ƒë√£ h·ªßy: ${result.SoDonDaHuy || 0}`);
      console.log(`   - Th·ªùi gian th·ª±c hi·ªán: ${duration}ms`);
      console.log(`   - T·ªïng ƒë√£ h·ªßy t·ª´ khi kh·ªüi ƒë·ªông: ${this.totalCancelled}`);

      // G·ª≠i th√¥ng b√°o n·∫øu c√≥ ƒë∆°n b·ªã h·ªßy
      if (result.SoDonDaHuy > 0) {
        await this.notifyExpiredReservations(result.SoDonDaHuy);
      }

      return result;

    } catch (error) {
      console.error('‚ùå L·ªói trong auto cancel job:', error);
      throw error;
    } finally {
      this.isRunning = false;
    }
  }

  async executeJavaScriptLogic() {
    try {
      const { DatBan, Ban } = require('../models');
      const { Op } = require('sequelize');

      const now = new Date();
      const today = now.toISOString().split('T')[0];
      const currentTime = now.toTimeString().split(' ')[0];

      // T√¨m c√°c ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n
      const expiredReservations = await DatBan.findAll({
        where: {
          TrangThai: ['ƒê√£ ƒë·∫∑t', 'ƒê√£ x√°c nh·∫≠n'],
          [Op.or]: [
            // Ng√†y ƒë·∫∑t ƒë√£ qua
            { NgayDat: { [Op.lt]: today } },
            // Ng√†y ƒë·∫∑t h√¥m nay nh∆∞ng ƒë√£ qu√° gi·ªù + 30 ph√∫t
            {
              NgayDat: today,
              GioDat: { [Op.lt]: sequelize.literal(`SUBTIME('${currentTime}', '00:30:00')`) }
            }
          ]
        }
      });

      if (expiredReservations.length === 0) {
        return { SoDonDaHuy: 0, ThongBao: 'Kh√¥ng c√≥ ƒë∆°n n√†o qu√° h·∫°n' };
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c ƒë∆°n qu√° h·∫°n
      const updatedCount = await DatBan.update(
        {
          TrangThai: 'ƒê√£ h·ªßy',
          GhiChu: sequelize.literal(`CONCAT(IFNULL(GhiChu, ''), ' [T·ª± ƒë·ªông h·ªßy do qu√° h·∫°n - ${now.toISOString()}]')`)
        },
        {
          where: {
            MaDat: expiredReservations.map(r => r.MaDat)
          }
        }
      );

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n v·ªÅ "Tr·ªëng" n·∫øu kh√¥ng c√≤n ƒë·∫∑t b√†n active
      const tableIds = [...new Set(expiredReservations.map(r => r.MaBan))];
      
      for (const tableId of tableIds) {
        const activeReservations = await DatBan.count({
          where: {
            MaBan: tableId,
            TrangThai: ['ƒê√£ ƒë·∫∑t', 'ƒê√£ x√°c nh·∫≠n'],
            [Op.or]: [
              { NgayDat: { [Op.gt]: today } },
              {
                NgayDat: today,
                GioDat: { [Op.gt]: currentTime }
              }
            ]
          }
        });

        if (activeReservations === 0) {
          await Ban.update(
            { TrangThai: 'Tr·ªëng' },
            { where: { MaBan: tableId } }
          );
        }
      }

      return {
        SoDonDaHuy: updatedCount[0] || 0,
        ThongBao: `ƒê√£ h·ªßy ${updatedCount[0] || 0} ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n`
      };

    } catch (error) {
      console.error('‚ùå L·ªói trong JavaScript logic:', error);
      throw error;
    }
  }

  async notifyExpiredReservations(count) {
    try {
      // C√≥ th·ªÉ t√≠ch h·ª£p v·ªõi h·ªá th·ªëng th√¥ng b√°o (email, SMS, webhook, etc.)
      console.log(`üìß Th√¥ng b√°o: ƒê√£ t·ª± ƒë·ªông h·ªßy ${count} ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n`);
      
      // V√≠ d·ª•: G·ª≠i webhook notification
      // await this.sendWebhookNotification(count);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:', error);
    }
  }

  async sendWebhookNotification(count) {
    // Placeholder cho webhook notification
    // const axios = require('axios');
    // await axios.post('YOUR_WEBHOOK_URL', {
    //   message: `Auto cancelled ${count} expired reservations`,
    //   timestamp: new Date().toISOString(),
    //   service: 'table-service'
    // });
  }

  async executeResetTablesAt10PM() {
    try {
      console.log(`üåô [${new Date().toISOString()}] B·∫Øt ƒë·∫ßu reset b√†n l√∫c 10h t·ªëi...`);

      // G·ªçi stored procedure (n·∫øu c√≥)
      let result;
      try {
        const results = await sequelize.query(
          'CALL TuDongResetBanThongMinh()',
          { type: QueryTypes.SELECT }
        );
        result = results[0];
      } catch (procError) {
        console.log('‚ö†Ô∏è Stored procedure kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng logic JavaScript...');
        result = await this.executeResetTablesJavaScriptLogic();
      }

      console.log(`‚úÖ Reset b√†n ho√†n th√†nh: ${result.SoBanDaReset || 0} b√†n ƒë√£ ƒë∆∞·ª£c reset`);
      return result;

    } catch (error) {
      console.error('‚ùå L·ªói khi reset b√†n l√∫c 10h t·ªëi:', error);
      throw error;
    }
  }

  async executeResetTablesJavaScriptLogic() {
    try {
      const { Ban, DatBan } = require('../models');
      const { Op } = require('sequelize');

      const now = new Date();
      const today = now.toISOString().split('T')[0];

      // T√¨m c√°c b√†n "ƒêang s·ª≠ d·ª•ng" kh√¥ng c√≥ ƒë·∫∑t b√†n active
      const tablesInUse = await Ban.findAll({
        where: { TrangThai: 'ƒêang s·ª≠ d·ª•ng' }
      });

      let resetCount = 0;

      for (const table of tablesInUse) {
        // Ki·ªÉm tra c√≥ ƒë·∫∑t b√†n active kh√¥ng
        const activeReservations = await DatBan.count({
          where: {
            MaBan: table.MaBan,
            TrangThai: ['ƒê√£ ƒë·∫∑t', 'ƒê√£ x√°c nh·∫≠n'],
            [Op.or]: [
              // C√≥ ƒë·∫∑t b√†n cho ng√†y mai ho·∫∑c sau ƒë√≥
              { NgayDat: { [Op.gt]: today } },
              // C√≥ ƒë·∫∑t b√†n h√¥m nay nh∆∞ng ch∆∞a ƒë·∫øn gi·ªù (sau 10h t·ªëi)
              {
                NgayDat: today,
                GioDat: { [Op.gt]: '22:00:00' }
              }
            ]
          }
        });

        // N·∫øu kh√¥ng c√≥ ƒë·∫∑t b√†n active th√¨ reset
        if (activeReservations === 0) {
          await table.update({ TrangThai: 'Tr·ªëng' });
          resetCount++;
        }
      }

      return {
        SoBanDaReset: resetCount,
        ThongBao: `ƒê√£ reset ${resetCount} b√†n v·ªÅ tr·∫°ng th√°i tr·ªëng`
      };

    } catch (error) {
      console.error('‚ùå L·ªói trong JavaScript reset logic:', error);
      throw error;
    }
  }

  start() {
    console.log('üöÄ Kh·ªüi ƒë·ªông Auto Cancel Job...');
    
    // Job 1: H·ªßy ƒë∆°n ƒë·∫∑t b√†n qu√° h·∫°n - ch·∫°y m·ªói 30 ph√∫t
    const cancelSchedule = process.env.AUTO_CANCEL_SCHEDULE || '0 */30 * * * *';
    
    this.cancelJob = cron.schedule(cancelSchedule, async () => {
      await this.executeCancelExpiredReservations();
    }, {
      scheduled: true,
      timezone: 'Asia/Ho_Chi_Minh'
    });

    // Job 2: Reset b√†n l√∫c 10h t·ªëi m·ªói ng√†y
    const resetSchedule = process.env.AUTO_RESET_SCHEDULE || '0 0 22 * * *';
    
    this.resetJob = cron.schedule(resetSchedule, async () => {
      await this.executeResetTablesAt10PM();
    }, {
      scheduled: true,
      timezone: 'Asia/Ho_Chi_Minh'
    });

    console.log(`‚úÖ Auto Cancel Job ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch: ${cancelSchedule}`);
    console.log(`‚úÖ Auto Reset Tables Job ƒë√£ ƒë∆∞·ª£c l√™n l·ªãch: ${resetSchedule}`);
    console.log(`üìÖ M√∫i gi·ªù: Asia/Ho_Chi_Minh`);
    
    // Ch·∫°y m·ªôt l·∫ßn ngay khi kh·ªüi ƒë·ªông (optional)
    if (process.env.RUN_ON_STARTUP === 'true') {
      setTimeout(() => {
        this.executeCancelExpiredReservations();
      }, 5000); // Ch·ªù 5 gi√¢y sau khi kh·ªüi ƒë·ªông
    }
  }

  stop() {
    if (this.cancelJob) {
      this.cancelJob.stop();
      console.log('üõë Auto Cancel Job ƒë√£ d·ª´ng');
    }
    if (this.resetJob) {
      this.resetJob.stop();
      console.log('üõë Auto Reset Tables Job ƒë√£ d·ª´ng');
    }
  }

  getStatus() {
    return {
      isRunning: this.isRunning,
      lastRun: this.lastRun,
      totalCancelled: this.totalCancelled,
      cancelSchedule: process.env.AUTO_CANCEL_SCHEDULE || '0 */30 * * * *',
      resetSchedule: process.env.AUTO_RESET_SCHEDULE || '0 0 22 * * *',
      nextCancelRun: this.cancelJob ? this.cancelJob.nextDate() : null,
      nextResetRun: this.resetJob ? this.resetJob.nextDate() : null
    };
  }

  async runManually() {
    console.log('üîß Ch·∫°y th·ªß c√¥ng Auto Cancel Job...');
    return await this.executeCancelExpiredReservations();
  }

  async runResetManually() {
    console.log('üîß Ch·∫°y th·ªß c√¥ng Reset Tables Job...');
    return await this.executeResetTablesAt10PM();
  }
}

// Singleton instance
const autoCancelJob = new AutoCancelJob();

module.exports = autoCancelJob;
